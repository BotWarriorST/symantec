%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Philip\Documents\MATLAB\data_20151104.txt
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2015/11/04 13:53:30

%% Initialize variables.

cntFromAcc = zeros(1, 10);
cntFromLight = zeros(1, 10);
cntFromMot = zeros(1, 10);
cntFromTmp = zeros(1, 10);

for i = 1 : 10
%i = 6;
filename = strcat('C:\Users\Philip\Documents\MATLAB\Data\Occupancy', num2str(i));
filename = strcat(filename, '.txt');   
%filename = 'C:\Users\Philip\Documents\MATLAB\Data\Occupancy10.txt';
delimiter = '\t';
startRow = 2;

%% Format string for each line of text:
%   column1: double (%f)
%	column2: text (%s)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
%   column9: double (%f)
%	column10: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%s%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
temp = dataArray{:, 1};
id = dataArray{:, 2};
light = dataArray{:, 3};
timestamp = dataArray{:, 4};
acc_z = dataArray{:, 5};
acc_y = dataArray{:, 6};
acc_x = dataArray{:, 7};
motion = dataArray{:, 8};
pressure = dataArray{:, 9};
humid = dataArray{:, 10};
acc = sqrt((acc_x.*acc_x)+(acc_y.*acc_y)+(acc_z.*acc_z));

%% Clear temporary variables
%{
clearvars filename delimiter startRow formatSpec fileID dataArray ans;

hpFilt = designfilt('highpassfir','StopbandFrequency',0.5, ...
         'PassbandFrequency',0.6,'PassbandRipple',0.5, ...
         'StopbandAttenuation',60,'DesignMethod','kaiserwin');
fvtool(hpFilt);
temp_hp = filter(hpFilt,temp);
figure;
plot(temp_hp);
%}

lpFilt = designfilt('lowpassfir','PassbandFrequency',0.01, ...
         'StopbandFrequency',0.1,'PassbandRipple',0.5, ...
         'StopbandAttenuation',60,'DesignMethod','kaiserwin');
temp_lp = filter(lpFilt,temp);
acc_lp = filter(lpFilt,acc);
%figure;
%plot(acc_lp);

%figure;
%plot(temp_diff_lp);

%{
figure;
subplot(3, 2, 1), plot(motion);
title('motion');
subplot(3, 2, 3), plot(light);
title('light');
subplot(3, 2, 5), plot(pressure);
title('pressure');

subplot(3, 2, 2), plot(humid);
title('humid');
subplot(3, 2, 4), plot(temp);
title('temp');
subplot(3, 2, 6), plot(acc);
title('normalized acc');
%}

[motion_sig, win1] = slidingWin(motion, 100, 5);
mot_final_sig = satCounter(motion_sig, 100);
cntFromMot(i) = countEventNum(mot_final_sig);
light_sig = threshold(light, light(1) - 10000, 1);
light_final_sig = satCounter(light_sig, 100);
cntFromLight(i) = countEventNum(light_final_sig);

[acc_sig, win2] = slidingWinDelay(diff(acc_lp), 500, 5, 100);
acc_final_sig = satCounter(acc_sig, 200);
cntFromAcc(i) = countEventNum(acc_final_sig);
[temp_sig, win3] = slidingWinDelay(diff(temp_lp), 100, 0.1, 100);
temp_final_sig = satCounter(temp_sig, 200);
cntFromTmp(i) = countEventNum(temp_final_sig);

%{
figure
subplot(4, 1, 1), plot(acc);
title('original sensor data(A)');
subplot(4, 1, 2), plot(diff(acc_lp)); ylim([-3, 3]);
title('after LPF & diff(C)');
subplot(4, 1, 3), plot(win2);
title('after sliding window(D)');
subplot(4, 1, 4), plot(acc_final_sig);
title('after threshold & glitch removal(F)');
%}
end

